rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ===== Helper Functions ===== */

    function signedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return signedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return signedIn() && (
        request.auth.uid == "3rOEe2tzu6cahiDBgmck7WIZ2nS2" ||
        request.auth.token.role in ['admin', 'superadmin']
      );
    }

    function reqMsgAuthor() {
      return request.resource.data.author;
    }

    function resMsgAuthor() {
      return resource.data.author;
    }/* ===== User Profiles ===== */
    match /users/{uid} {
      allow read: if true;
      allow write: if signedIn() && request.auth.uid == uid;
    }

    match /users/{userId}/{document=**} {
      allow read, write: if isOwner(userId);
    }

    /* ===== Likes ===== */
    match /likes/{likeId} {
      allow read: if signedIn() && (
        resource.data.fromUid == request.auth.uid ||
        resource.data.toUid == request.auth.uid
      );
      allow create: if signedIn() &&
        request.resource.data.fromUid == request.auth.uid &&
        request.resource.data.toUid != request.auth.uid;
      allow update: if false;
      allow delete: if signedIn() && resource.data.fromUid == request.auth.uid;
    }

    /* ===== Views ===== */
    match /views/{viewId} {
      allow read: if signedIn() && (
        resource.data.viewerUid == request.auth.uid ||
        resource.data.viewedUid == request.auth.uid
      );
      allow create: if signedIn() &&
        request.resource.data.viewerUid == request.auth.uid &&
        request.resource.data.viewedUid != request.auth.uid;
      allow update: if false;
      allow delete: if signedIn() && resource.data.viewerUid == request.auth.uid;
    }

    /* ===== Matches ===== */
    match /matches/{matchId} {
      allow read: if signedIn() && request.auth.uid in resource.data.uids;
      allow create: if signedIn() &&
        request.resource.data.uids is list &&
        request.resource.data.uids.size() == 2 &&
        request.auth.uid in request.resource.data.uids;
      allow update: if signedIn() && request.auth.uid in resource.data.uids;
      allow delete: if signedIn() && (request.auth.uid in resource.data.uids || isAdmin());
    }

    match /matches/{matchId}/messages/{messageId} {
      allow read: if signedIn() && request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.uids;
      allow create: if signedIn() &&
        request.resource.data.senderUid == request.auth.uid &&
        request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.uids;
      allow update: if signedIn() && resource.data.senderUid == request.auth.uid;
      allow delete: if signedIn() && (resource.data.senderUid == request.auth.uid || isAdmin());
    }

    /* ===== Favorites ===== */
    match /favorites/{favId} {
      allow read: if signedIn();
      allow create, delete: if signedIn() && request.auth.uid == request.resource.data.from;
    }

    /* ===== Casualties ===== */
    match /casualties/{casualtyId} {
      allow read: if signedIn();
      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;
      allow update: if signedIn() && resource.data.uid == request.auth.uid;
      allow delete: if signedIn() && (resource.data.uid == request.auth.uid || isAdmin());
    }

    match /dating_casualties/{casualtyId} {
      allow read: if signedIn();
      allow create: if signedIn() && request.resource.data.authorUid == request.auth.uid;
      allow update: if signedIn() && resource.data.authorUid == request.auth.uid;
      allow delete: if isAdmin() || resource.data.authorUid == request.auth.uid;
    }

    match /user_casualty_votes/{voteId} {
      allow read: if signedIn();
      allow create: if signedIn() && request.resource.data.voterUid == request.auth.uid;
      allow update: if signedIn() && resource.data.voterUid == request.auth.uid;
      allow delete: if isAdmin() || resource.data.voterUid == request.auth.uid;
    }/* ===== Private Chats ===== */
    match /chats/{chatId} {
      allow read: if signedIn() && request.auth.uid in resource.data.uids;
      allow create: if signedIn() && request.auth.uid in request.resource.data.uids;
      allow update, delete: if signedIn() && request.auth.uid in resource.data.uids;
    }

    match /chats/{chatId}/messages/{messageId} {
      allow read: if signedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.uids;
      allow create: if signedIn() &&
        request.resource.data.senderUid == request.auth.uid &&
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.uids;
      allow update: if signedIn() && resource.data.senderUid == request.auth.uid;
      allow delete: if signedIn() && (resource.data.senderUid == request.auth.uid || isAdmin());
    }

    /* ===== Community Rooms ===== */
    match /rooms/{roomId} {
      allow read: if true;
      allow create: if signedIn();
      allow update: if signedIn() &&
        (request.auth.uid == resource.data.ownerId || isAdmin());
      allow delete: if isAdmin();
    }

    match /rooms/{roomId}/messages/{msgId} {
      allow read: if true;
      allow create: if signedIn() && reqMsgAuthor() == request.auth.uid;
      allow update, delete: if signedIn() && (resMsgAuthor() == request.auth.uid || isAdmin());
    }

    match /rooms/{roomId}/members/{memberId} {
      allow read: if true;
      allow create, update: if signedIn() &&
        (request.auth.uid == memberId || request.auth.uid == request.resource.data.uid);
      allow delete: if signedIn() &&
        (request.auth.uid == memberId || request.auth.uid == resource.data.uid || isAdmin());
    }

    /* ===== Lounge ===== */
    match /lounge_presence/{userId} {
      allow read: if signedIn();
      allow create, update, delete: if isOwner(userId);
    }

    match /lounge_messages/{messageId} {
      allow read: if true;
      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;
      allow update: if signedIn() && resource.data.uid == request.auth.uid;
      allow delete: if signedIn() && (resource.data.uid == request.auth.uid || isAdmin());
    }

    match /table_chats/{tableId}/messages/{messageId} {
      allow read: if true;
      allow create: if signedIn() &&
        request.resource.data.uid == request.auth.uid &&
        request.resource.data.message is string &&
        request.resource.data.message.size() > 0 &&
        request.resource.data.message.size() <= 1000 &&
        request.resource.data.timestamp != null;
      allow update: if signedIn() && resource.data.uid == request.auth.uid;
      allow delete: if signedIn() && (resource.data.uid == request.auth.uid || isAdmin());
    }

    /* ===== Whispers ===== */
    match /whispers/{conversationId}/messages/{messageId} {
      function participants() { return conversationId.split('_'); }
      allow read: if signedIn() && request.auth.uid in participants();
      allow create: if signedIn() &&
        request.resource.data.fromUid == request.auth.uid &&
        request.resource.data.toUid in participants();
      allow update: if signedIn() && resource.data.fromUid == request.auth.uid;
      allow delete: if signedIn() && (resource.data.fromUid == request.auth.uid || isAdmin());
    }

    match /lounge_whispers/{whisperId} {
      allow read: if signedIn() &&
        (resource.data.fromUid == request.auth.uid || resource.data.toUid == request.auth.uid);
      allow create: if signedIn() && request.resource.data.fromUid == request.auth.uid;
      allow update: if false;
      allow delete: if signedIn() && (resource.data.fromUid == request.auth.uid || isAdmin());
    }/* ===== Live Streams ===== */
    match /liveStreams/{streamId} {
      allow read: if true;
      allow create: if signedIn() && request.resource.data.streamerUid == request.auth.uid;
      allow update: if signedIn() &&
        (resource.data.streamerUid == request.auth.uid || request.resource.data.streamerUid == request.auth.uid || isAdmin());
      allow delete: if signedIn() && (resource.data.streamerUid == request.auth.uid || isAdmin());
    }

    match /liveStreams/{streamId}/chat/{messageId} {
      allow read: if true;
      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if signedIn() && (resource.data.uid == request.auth.uid || isAdmin());
    }

    match /liveStreamViewers/{viewerId} {
      allow read: if signedIn();
      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if signedIn() && (resource.data.uid == request.auth.uid || isAdmin());
    }

    match /webrtcSignals/{signalId} {
      allow read, write: if signedIn();
    }

    match /liveStreamSignals/{signalId} {
      allow read: if signedIn();
      allow create: if signedIn() && request.auth.uid == request.resource.data.from;
      allow update, delete: if false;
    }

    match /liveStreamSignals/{signalId}/candidates/{cid} {
      allow read: if signedIn();
      allow create: if signedIn() && request.auth.uid == request.resource.data.from;
      allow update, delete: if false;
    }

    /* ===== Stages ===== */
    match /stages_events/{eventId} {
      allow read: if true;
      allow create: if signedIn() && request.resource.data.hostUid == request.auth.uid;
      allow update: if signedIn() &&
        (resource.data.hostUid == request.auth.uid || request.resource.data.hostUid == request.auth.uid || isAdmin());
      allow delete: if signedIn() && (resource.data.hostUid == request.auth.uid || isAdmin());
    }

    match /stages_events/{eventId}/chat/{messageId} {
      allow read: if true;
      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if signedIn() && (resource.data.uid == request.auth.uid || isAdmin());
    }

    match /stages_events/{eventId}/participants/{participantId} {
      allow read: if true;
      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if signedIn() &&
        (resource.data.uid == request.auth.uid || get(/databases/$(database)/documents/stages_events/$(eventId)).data.hostUid == request.auth.uid || isAdmin());
    }/* ===== World Feed (Town Square) ===== */
    match /world_feed/{postId} {
      allow read: if true;
      allow create: if signedIn() &&
        request.resource.data.uid == request.auth.uid &&
        request.resource.data.content is string &&
        request.resource.data.content.size() >= 1 &&
        request.resource.data.content.size() <= 2000 &&
        request.resource.data.timestamp != null;
      allow update: if signedIn() && (resource.data.uid == request.auth.uid || isAdmin());
      allow delete: if signedIn() && (resource.data.uid == request.auth.uid || isAdmin());
    }

    match /world_feed/{postId}/comments/{commentId} {
      allow read: if true;
      allow create: if signedIn() &&
        request.resource.data.uid == request.auth.uid &&
        request.resource.data.content is string &&
        request.resource.data.content.size() > 0 &&
        request.resource.data.content.size() <= 500 &&
        request.resource.data.timestamp != null;
      allow update, delete: if signedIn() && (resource.data.uid == request.auth.uid || isAdmin());
    }

    match /world_feed/{postId}/reactions/{reactionId} {
      allow read: if true;
      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if signedIn() && resource.data.uid == request.auth.uid;
    }

    /* ===== Districts ===== */
    match /districts_chats/{district}/messages/{messageId} {
      allow read: if signedIn();
      allow create: if signedIn() &&
        request.resource.data.uid == request.auth.uid &&
        request.resource.data.content is string &&
        request.resource.data.content.size() >= 1 &&
        request.resource.data.content.size() <= 1000;
      allow update, delete: if signedIn() && (resource.data.uid == request.auth.uid || isAdmin());
    }

    match /districts_confessions/{district}/confessions/{confessionId} {
      allow read: if true;
      allow create: if signedIn() &&
        !request.resource.data.keys().hasAny(['uid','displayName','email','photoURL']) &&
        request.resource.data.content is string &&
        request.resource.data.content.size() >= 3 &&
        request.resource.data.content.size() <= 500 &&
        request.resource.data.timestamp != null;
      allow update, delete: if false;
    }

    match /districts_events/{eventId} {
      allow read: if true;
      allow create: if signedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if signedIn() &&
        (resource.data.createdBy == request.auth.uid || isAdmin());
      allow delete: if signedIn() && (resource.data.createdBy == request.auth.uid || isAdmin());
    }

    /* ===== Arcade ===== */
    match /arcade_points/{userId} {
      allow read: if signedIn();
      allow create, update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    match /arcade_memes/{allPaths=**} {
      allow read: if true;
      allow create: if signedIn() &&
        request.resource.size <= 5 * 1024 * 1024;
      allow delete: if isAdmin();
    }

    /* ===== Passport System ===== */
    match /passport_stamps/{stampId} {
      allow read: if signedIn();
      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if signedIn() && (resource.data.uid == request.auth.uid || isAdmin());
    }

    match /passport_travels/{travelId} {
      allow read: if signedIn();
      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if signedIn() && (resource.data.uid == request.auth.uid || isAdmin());
    }

    match /passport_encounters/{encounterId} {
      allow read: if signedIn();
      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if signedIn() && (resource.data.uid == request.auth.uid || isAdmin());
    }

    /* ===== Daily Missions ===== */
    match /daily_missions/{missionId} {
      allow read: if signedIn();
      allow create, update, delete: if isAdmin();
    }

    match /user_mission_progress/{progressId} {
      allow read: if signedIn() && progressId.matches(request.auth.uid + '_.*');
      allow create: if signedIn() && progressId.matches(request.auth.uid + '_.*');
      allow update: if signedIn() && progressId.matches(request.auth.uid + '_.*');
      allow delete: if signedIn() && progressId.matches(request.auth.uid + '_.*');
    }

    /* ===== Moderation ===== */
    match /moderationReports/{reportId} {
      allow read: if isAdmin();
      allow create: if signedIn();
      allow update, delete: if isAdmin();
    }

    /* ===== Notifications ===== */
    match /notifications/{userId}/items/{notificationId} {
      allow read: if isOwner(userId);
      allow create: if signedIn();
      allow update, delete: if isOwner(userId);
    }/* ===== Global Admin Powers ===== */
    match /{document=**} {
      allow delete: if isAdmin(); // 🔥 you can clear any collection
      allow read, write: if false;
    }

  }
}
