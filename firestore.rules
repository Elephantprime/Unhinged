rules_version = '2';

service cloud.firestore {

  match /databases/{database}/documents {

    /* ===== Security Helpers ===== */

    function signedIn() { return request.auth != null; }

    function isOwner(userId) { return signedIn() && request.auth.uid == userId; }

    // Simple admin check - can be enhanced later if needed

    function isAdmin() {

      return signedIn() && 

             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isAdmin', false) == true;

    }

    // DEPRECATED: Old helper functions - kept for reference but should not be used

    // function isAdmin() { 

    //   return signedIn() && 

    //   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isAdmin', false) == true; 

    // }

    // function isWhitelisted() {

    //   return signedIn() && exists(/databases/$(database)/documents/authorizedUsers/$(request.auth.uid));

    // }

    // Ensure a field is unchanged compared to existing doc

    function fieldUnchanged(field) {

      return (field in resource.data) &&

             ( !(field in request.resource.data) ||

               request.resource.data[field] == resource.data[field] );

    }

    // Accept either senderId or uid as the message author field

    function reqMsgAuthor() {

      return (request.resource.data.uid != null)

             ? request.resource.data.uid

             : request.resource.data.senderId;

    }

    function resMsgAuthor() {

      return (resource.data.uid != null)

             ? resource.data.uid

             : resource.data.senderId;

    }

    /* ===== Users (profiles) ===== */

    match /users/{uid} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == uid;
    }

    // Private subcollections under a user

    match /users/{userId}/{document=**} {

      allow read, write: if isOwner(userId);

    }

    /* ===== Admin Users Collection ===== */

    match /system_admins/{userId} {

      allow read: if isAdmin();

      allow write: if false; // Only system can create admins

    }

    /* ===== User Presence System ===== */

    match /presence/{userId} {

      allow read: if signedIn(); // Anyone can see who's online

      allow create: if isOwner(userId) && signedIn();

      allow update: if isOwner(userId) && signedIn();

      allow delete: if isOwner(userId) && signedIn();

    }

    /* ===== Rooms (Community Chat) ===== */

    match /rooms/{roomId} {

      allow read: if true; // Allow public read access to room info

      allow create: if signedIn();

      allow update, delete: if signedIn() &&

        (request.auth.uid == resource.data.get('ownerId', null) || isAdmin());

    }

    // Room members - FIXED: Users can manage membership via doc ID or data.uid

    match /rooms/{roomId}/members/{memberId} {

      allow read: if true; // Allow reading member list

      allow create, update: if signedIn() && (request.auth.uid == memberId || request.auth.uid == request.resource.data.uid);

      allow delete: if signedIn() && (request.auth.uid == memberId || request.auth.uid == resource.data.uid);

    }

    // Room messages

    match /rooms/{roomId}/messages/{msgId} {

      allow read: if true; // Allow public read access to chat messages

      allow create: if signedIn() && reqMsgAuthor() == request.auth.uid;

      allow update, delete: if signedIn() && (resMsgAuthor() == request.auth.uid || isAdmin());

    }

    /* ===== Chat System ===== */

    // Main chats collection for private messages

    match /chats/{chatId} {

      allow read: if signedIn() && request.auth.uid in resource.data.uids;

      allow create: if signedIn() && request.auth.uid in request.resource.data.uids;

      allow update: if signedIn() && request.auth.uid in resource.data.uids;

      allow delete: if signedIn() && request.auth.uid in resource.data.uids;

    }

    // Chat messages subcollection

    match /chats/{chatId}/messages/{messageId} {

      allow read: if signedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.uids;

      allow create: if signedIn() && 

        request.resource.data.senderUid == request.auth.uid &&

        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.uids;

      allow update: if signedIn() && resource.data.senderUid == request.auth.uid;

      allow delete: if signedIn() && (resource.data.senderUid == request.auth.uid || isAdmin());

    }

    // Bulk deletion for admins - Room chats

    match /rooms/{roomId}/{document=**} {

      allow delete: if isAdmin();

    }

    // Bulk deletion for admins - World Feed

    match /world_feed/{document=**} {

      allow delete: if isAdmin();

    }

    // Bulk deletion for admins - Lounge messages

    match /lounge_messages/{document=**} {

      allow delete: if isAdmin();

    }

    // Bulk deletion for admins - Table chats

    match /table_chats/{tableId}/{document=**} {

      allow delete: if isAdmin();

    }

    // Bulk deletion for admins - Districts chats

    match /districts_chats/{district}/{document=**} {

      allow delete: if isAdmin();

    }

    // Bulk deletion for admins - Districts confessions

    match /districts_confessions/{district}/{document=**} {

      allow delete: if isAdmin();

    }

    // Bulk deletion for admins - Individual district collections

    match /districts_dating/{document=**} {

      allow delete: if isAdmin();

    }

    match /districts_memes/{document=**} {

      allow delete: if isAdmin();

    }

    match /districts_confessions/{document=**} {

      allow delete: if isAdmin();

    }

    match /districts_debates/{document=**} {

      allow delete: if isAdmin();

    }

    match /districts_support/{document=**} {

      allow delete: if isAdmin();

    }

    match /districts_gaming/{document=**} {

      allow delete: if isAdmin();

    }

    match /districts_messages/{document=**} {

      allow delete: if isAdmin();

    }

    // Bulk deletion for admins - Live stream chat

    match /liveStreams/{streamId}/chat/{document=**} {

      allow delete: if isAdmin();

    }

    // Room notifications

    match /rooms/{roomId}/notifications/{notificationId} {

      allow read: if true;

      allow create: if signedIn();

      allow update, delete: if signedIn() &&

        (resource.data.uid == request.auth.uid || 

         request.resource.data.uid == request.auth.uid || 

         isAdmin());

    }

    /* ===== Live Streams System ===== */

    match /liveStreams/{streamId} {

      allow read: if true; // Public read for Browse Live functionality

      allow create: if signedIn() && request.resource.data.streamerUid == request.auth.uid;

      allow update: if signedIn() && (

        resource.data.streamerUid == request.auth.uid ||

        request.resource.data.streamerUid == request.auth.uid ||

        isAdmin()

      );

      allow delete: if signedIn() &&

        (resource.data.streamerUid == request.auth.uid || isAdmin());

    }

    // Live stream chat

    match /liveStreams/{streamId}/chat/{messageId} {

      allow read: if true;

      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;

      allow update, delete: if signedIn() &&

        (resource.data.uid == request.auth.uid || isAdmin());

    }

    // Live stream viewers

    match /liveStreamViewers/{viewerId} {

      allow read: if signedIn();

      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;

      allow update, delete: if signedIn() &&

        (resource.data.uid == request.auth.uid || isAdmin());

    }

    // WebRTC signaling for live streams

    match /webrtcSignals/{signalId} {

      allow read, write: if signedIn();

    }

    match /liveStreamSignals/{signalId} {

      allow read: if signedIn(); // Relaxed for query compatibility

      allow create: if signedIn() && request.auth.uid == request.resource.data.from;

      allow update, delete: if false;

    }

    match /liveStreamSignals/{signalId}/candidates/{cid} {

      allow read: if signedIn();

      allow create: if signedIn() && request.auth.uid == request.resource.data.from;

      allow update, delete: if false;

    }

    match /liveStreamSignals/{answersId}/items/{answerId} {

      allow read: if signedIn() && (

        request.auth.uid == resource.data.from || 

        request.auth.uid == resource.data.to

      );

      allow create: if signedIn() && request.auth.uid == request.resource.data.from;

      allow update, delete: if false;

    }

    match /liveStreamSignals/{answersId}/items/{answerId}/candidates/{cid} {

      allow read: if signedIn() && (

        request.auth.uid == resource.data.from || 

        request.auth.uid == resource.data.to

      );

      allow create: if signedIn() && request.auth.uid == request.resource.data.from;

      allow update, delete: if false;

    }

    /* ===== World Feed (Town Square) ===== */

    match /world_feed/{postId} {

      allow read: if true; // Public read access to feed posts

      allow create: if signedIn() &&

        request.resource.data.uid == request.auth.uid &&

        request.resource.data.uid is string &&

        request.resource.data.content is string &&

        request.resource.data.content.size() >= 1 &&

        request.resource.data.content.size() <= 2000 &&

        request.resource.data.author is map &&

        request.resource.data.author.uid == request.auth.uid &&

        request.resource.data.author.name is string &&

        request.resource.data.type is string &&

        request.resource.data.timestamp != null;

      allow update: if signedIn() && (resource.data.uid == request.auth.uid || isAdmin());

      allow delete: if signedIn() && (resource.data.uid == request.auth.uid || isAdmin());

    }

    // World Feed Comments

    match /world_feed/{postId}/comments/{commentId} {

      allow read: if true; // Public read access to comments

      allow create: if signedIn() &&

        request.resource.data.uid == request.auth.uid &&

        request.resource.data.content is string &&

        request.resource.data.content.size() > 0 &&

        request.resource.data.content.size() <= 500 &&

        request.resource.data.timestamp != null;

      allow update, delete: if signedIn() &&

        (resource.data.uid == request.auth.uid || isAdmin());

    }

    // World Feed Reactions/Likes

    match /world_feed/{postId}/reactions/{reactionId} {

      allow read: if true;

      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;

      allow update, delete: if signedIn() && resource.data.uid == request.auth.uid;

    }

    /* ===== Lounge System ===== */

    // Lounge presence tracking

    match /lounge_presence/{userId} {

      allow read: if signedIn(); // Anyone can see who's in lounge

      allow create: if isOwner(userId) && signedIn();

      allow update: if isOwner(userId) && signedIn();

      allow delete: if isOwner(userId) && signedIn();

    }

    // Lounge global chat

    match /lounge_messages/{messageId} {

      allow read: if true; // Public read for lounge chat

      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;

      allow update: if signedIn() && resource.data.uid == request.auth.uid;

      allow delete: if signedIn() && (resource.data.uid == request.auth.uid || isAdmin());

    }

    // Table-specific chat in lounge

    match /table_chats/{tableId}/messages/{messageId} {

      allow read: if true; // Public read for table chat

      allow create: if signedIn() &&

        request.resource.data.uid == request.auth.uid &&

        request.resource.data.message is string &&

        request.resource.data.message.size() > 0 && 

        request.resource.data.message.size() <= 1000 &&

        request.resource.data.timestamp != null;

      allow update: if signedIn() && resource.data.uid == request.auth.uid;

      allow delete: if signedIn() && (resource.data.uid == request.auth.uid || isAdmin());

    }

    // Whisper conversations in lounge

    match /whispers/{conversationId}/messages/{messageId} {

      function participants() { 

        return conversationId.split('_'); 

      }

      allow read: if signedIn() && request.auth.uid in participants();

      allow create: if signedIn() &&

        request.resource.data.fromUid == request.auth.uid &&

        request.resource.data.toUid in participants() &&

        request.resource.data.message is string &&

        request.resource.data.message.size() > 0 && 

        request.resource.data.message.size() <= 1000 &&

        request.resource.data.timestamp != null;

      allow update: if signedIn() && resource.data.fromUid == request.auth.uid;

      allow delete: if signedIn() &&

        (resource.data.fromUid == request.auth.uid || isAdmin());

    }

    // Lounge whisper messages

    match /lounge_whispers/{whisperId} {

      allow read: if signedIn() && (

        resource.data.fromUid == request.auth.uid || 

        resource.data.toUid == request.auth.uid

      );

      allow create: if signedIn() && request.resource.data.fromUid == request.auth.uid;

      allow update: if false; // Whispers are immutable

      allow delete: if signedIn() && 

        (resource.data.fromUid == request.auth.uid || isAdmin());

    }

    // Lounge games and prompts

    match /lounge_games/{gameId} {

      allow read: if true; // Public read for game prompts

      allow create: if signedIn(); // Users can create games

      allow update: if signedIn() && (resource.data.createdBy == request.auth.uid || isAdmin());

      allow delete: if signedIn() && (resource.data.createdBy == request.auth.uid || isAdmin());

    }

    match /lounge_prompts/{promptId} {

      allow read: if true; // Public read for conversation prompts

      allow create: if signedIn(); // Users can create prompts

      allow update: if signedIn() && (resource.data.createdBy == request.auth.uid || isAdmin());

      allow delete: if signedIn() && (resource.data.createdBy == request.auth.uid || isAdmin());

    }

    /* ===== Stages System ===== */

    // Main stages events collection

    match /stages_events/{eventId} {

      allow read: if true; // Anyone can browse events

      allow create: if signedIn() && request.resource.data.hostUid == request.auth.uid;

      allow update: if signedIn() && (

        resource.data.hostUid == request.auth.uid || 

        request.resource.data.hostUid == request.auth.uid ||

        isAdmin()

      );

      allow delete: if signedIn() && 

        (resource.data.hostUid == request.auth.uid || isAdmin());

    }

    // Event participants tracking

    match /stages_events/{eventId}/participants/{participantId} {

      allow read: if true; // Public read for participant counts

      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;

      allow update: if signedIn() && (

        resource.data.uid == request.auth.uid || 

        get(/databases/$(database)/documents/stages_events/$(eventId)).data.hostUid == request.auth.uid ||

        isAdmin()

      );

      allow delete: if signedIn() && (

        resource.data.uid == request.auth.uid || 

        get(/databases/$(database)/documents/stages_events/$(eventId)).data.hostUid == request.auth.uid ||

        isAdmin()

      );

    }

    // Event chat messages

    match /stages_events/{eventId}/chat/{messageId} {

      allow read: if true; // Public read for event chat

      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;

      allow update, delete: if signedIn() && 

        (resource.data.uid == request.auth.uid || isAdmin());

    }

    // Stage WebRTC signaling for video pods

    match /stages_signals/{signalId} {

      allow read: if signedIn(); // Relaxed for query compatibility

      allow create: if signedIn() && 

        request.resource.data.from == request.auth.uid &&

        request.resource.data.eventId != null &&

        exists(/databases/$(database)/documents/stages_events/$(request.resource.data.eventId)/participants/$(request.auth.uid));

      allow update, delete: if signedIn() && resource.data.from == request.auth.uid;

    }

    match /stages_signals/{signalId}/candidates/{candidateId} {

      allow read: if signedIn() && (

        request.auth.uid == resource.data.from || 

        request.auth.uid == resource.data.to

      );

      allow create: if signedIn() && request.resource.data.from == request.auth.uid;

      allow update, delete: if false;

    }

    // Hot seat queue for Q&A

    match /stages_events/{eventId}/hot_seat_queue/{queueId} {

      allow read: if true; // Public read for queue visibility

      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;

      allow update: if signedIn() && (

        resource.data.uid == request.auth.uid || 

        get(/databases/$(database)/documents/stages_events/$(eventId)).data.hostUid == request.auth.uid ||

        isAdmin()

      );

      allow delete: if signedIn() && (

        resource.data.uid == request.auth.uid || 

        get(/databases/$(database)/documents/stages_events/$(eventId)).data.hostUid == request.auth.uid ||

        isAdmin()

      );

    }

    // Audience reactions and interactions

    match /stages_events/{eventId}/reactions/{reactionId} {

      allow read: if true; // Public read for reaction counts

      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;

      allow update, delete: if signedIn() && resource.data.uid == request.auth.uid;

    }

    /* ===== Districts System ===== */

    // District chat messages (non-confession messages)

    match /districts_chats/{district}/messages/{messageId} {

      allow read: if true; // Public read for district chat

      allow create: if signedIn() && 

        request.resource.data.uid == request.auth.uid &&

        request.resource.data.displayName is string &&

        request.resource.data.content is string &&

        request.resource.data.content.size() >= 1 &&

        request.resource.data.content.size() <= 500 &&

        request.resource.data.messageType is string &&

        request.resource.data.district is string &&

        district.matches('^[a-z]+$') &&

        request.resource.data.messageType != 'confession';

      allow update, delete: if signedIn() && 

        (resource.data.uid == request.auth.uid || isAdmin());

    }

    // Districts chat messages (alternative collection name)

    match /districts_messages/{messageId} {

      allow read: if true; // Public read for district messages

      allow create: if signedIn() && 

        request.resource.data.uid == request.auth.uid &&

        request.resource.data.username is string &&

        request.resource.data.text is string &&

        request.resource.data.text.size() >= 1 &&

        request.resource.data.text.size() <= 500 &&

        request.resource.data.district is string &&

        request.resource.data.district.matches('^[a-z]+$') &&

        request.resource.data.timestamp != null;

      allow update, delete: if signedIn() && 

        (resource.data.uid == request.auth.uid || isAdmin());

    }

    // Districts by name (individual collections)

    match /districts_dating/{messageId} {

      allow read: if true; // Public read for district-specific messages

      allow create: if signedIn() && 

        request.resource.data.uid == request.auth.uid &&

        request.resource.data.username is string &&

        request.resource.data.text is string &&

        request.resource.data.text.size() >= 1 &&

        request.resource.data.text.size() <= 500 &&

        request.resource.data.timestamp != null;

      allow update, delete: if signedIn() && 

        (resource.data.uid == request.auth.uid || isAdmin());

    }

    match /districts_memes/{messageId} {

      allow read: if true; // Public read for district-specific messages

      allow create: if signedIn() && 

        request.resource.data.uid == request.auth.uid &&

        request.resource.data.username is string &&

        request.resource.data.text is string &&

        request.resource.data.text.size() >= 1 &&

        request.resource.data.text.size() <= 500 &&

        request.resource.data.timestamp != null;

      allow update, delete: if signedIn() && 

        (resource.data.uid == request.auth.uid || isAdmin());

    }

    match /districts_confessions/{messageId} {

      allow read: if true; // Public read for district-specific messages

      allow create: if signedIn() && 

        request.resource.data.uid == request.auth.uid &&

        request.resource.data.username is string &&

        request.resource.data.text is string &&

        request.resource.data.text.size() >= 1 &&

        request.resource.data.text.size() <= 500 &&

        request.resource.data.timestamp != null;

      allow update, delete: if signedIn() && 

        (resource.data.uid == request.auth.uid || isAdmin());

    }

    match /districts_debates/{messageId} {

      allow read: if true; // Public read for district-specific messages

      allow create: if signedIn() && 

        request.resource.data.uid == request.auth.uid &&

        request.resource.data.username is string &&

        request.resource.data.text is string &&

        request.resource.data.text.size() >= 1 &&

        request.resource.data.text.size() <= 500 &&

        request.resource.data.timestamp != null;

      allow update, delete: if signedIn() && 

        (resource.data.uid == request.auth.uid || isAdmin());

    }

    match /districts_support/{messageId} {

      allow read: if true; // Public read for district-specific messages

      allow create: if signedIn() && 

        request.resource.data.uid == request.auth.uid &&

        request.resource.data.username is string &&

        request.resource.data.text is string &&

        request.resource.data.text.size() >= 1 &&

        request.resource.data.text.size() <= 500 &&

        request.resource.data.timestamp != null;

      allow update, delete: if signedIn() && 

        (resource.data.uid == request.auth.uid || isAdmin());

    }

    match /districts_gaming/{messageId} {

      allow read: if true; // Public read for district-specific messages

      allow create: if signedIn() && 

        request.resource.data.uid == request.auth.uid &&

        request.resource.data.username is string &&

        request.resource.data.text is string &&

        request.resource.data.text.size() >= 1 &&

        request.resource.data.text.size() <= 500 &&

        request.resource.data.timestamp != null;

      allow update, delete: if signedIn() && 

        (resource.data.uid == request.auth.uid || isAdmin());

    }

    // District polls

    match /districts_polls/{pollId} {

      allow read: if true; // Public read for district polls

      allow create: if signedIn() && 

        request.resource.data.createdBy == request.auth.uid &&

        request.resource.data.question is string &&

        request.resource.data.question.size() >= 5 &&

        request.resource.data.question.size() <= 200 &&

        request.resource.data.options is list &&

        request.resource.data.options.size() >= 2 &&

        request.resource.data.options.size() <= 6 &&

        request.resource.data.district is string &&

        request.resource.data.district.matches('^[a-z]+$') &&

        request.resource.data.timestamp != null;

      allow update: if signedIn() && 

        (resource.data.createdBy == request.auth.uid || isAdmin());

      allow delete: if signedIn() && 

        (resource.data.createdBy == request.auth.uid || isAdmin());

    }

    // District poll votes

    match /districts_polls/{pollId}/votes/{voteId} {

      allow read: if true; // Public read for vote counts

      allow create: if signedIn() && 

        request.resource.data.uid == request.auth.uid &&

        request.resource.data.option is string &&

        request.resource.data.timestamp != null;

      allow update: if signedIn() && resource.data.uid == request.auth.uid;

      allow delete: if signedIn() && resource.data.uid == request.auth.uid;

    }

    // District stories

    match /districts_stories/{storyId} {

      allow read: if true; // Public read for district stories

      allow create: if signedIn() && 

        request.resource.data.createdBy == request.auth.uid &&

        request.resource.data.title is string &&

        request.resource.data.title.size() >= 3 &&

        request.resource.data.title.size() <= 100 &&

        request.resource.data.content is string &&

        request.resource.data.content.size() >= 10 &&

        request.resource.data.content.size() <= 1000 &&

        request.resource.data.district is string &&

        request.resource.data.district.matches('^[a-z]+$') &&

        request.resource.data.timestamp != null;

      allow update: if signedIn() && 

        (resource.data.createdBy == request.auth.uid || isAdmin());

      allow delete: if signedIn() && 

        (resource.data.createdBy == request.auth.uid || isAdmin());

    }

    // District story reactions

    match /districts_stories/{storyId}/reactions/{reactionId} {

      allow read: if true; // Public read for story reactions

      allow create: if signedIn() && 

        request.resource.data.uid == request.auth.uid &&

        request.resource.data.type in ['like', 'love', 'support', 'wow'] &&

        request.resource.data.timestamp != null;

      allow update, delete: if signedIn() && resource.data.uid == request.auth.uid;

    }

    // Anonymous confessions with strict anonymity enforcement

    match /districts_confessions/{district}/confessions/{confessionId} {

      allow read: if true; // Public read for anonymous confessions

      allow create: if signedIn() && 

        // Block ALL PII fields for anonymity

        !request.resource.data.keys().hasAny(['uid', 'userId', 'displayName', 'email', 'photoURL', 'name', 'avatar', 'author']) &&

        request.resource.data.keys().hasAll(['content', 'district', 'timestamp', 'messageType']) &&

        request.resource.data.messageType == 'confession' &&

        request.resource.data.district == district &&

        district.matches('^[a-z]+$') &&

        request.resource.data.content is string &&

        request.resource.data.content.size() >= 3 &&

        request.resource.data.content.size() <= 500 &&

        request.resource.data.timestamp != null;

      allow update, delete: if false; // Confessions are immutable

    }

    // District user profiles and reputation

    match /districts_users/{userId} {

      allow read: if signedIn();

      allow create: if signedIn() && userId == request.auth.uid;

      allow update: if signedIn() && userId == request.auth.uid;

      allow delete: if signedIn() && userId == request.auth.uid;

    }

    // District events (debates, contests, tournaments)

    match /districts_events/{eventId} {

      allow read: if true; // Public read for district events

      allow create: if signedIn() && 

        request.resource.data.createdBy == request.auth.uid &&

        request.resource.data.keys().hasAll(['createdBy', 'district', 'title', 'timestamp']) &&

        request.resource.data.title is string &&

        request.resource.data.title.size() <= 100 &&

        request.resource.data.district is string &&

        request.resource.data.district.matches('^[a-z]+$') &&

        request.resource.data.timestamp != null;

      allow update: if signedIn() && 

        resource != null &&

        (

          resource.data.createdBy == request.auth.uid || 

          (resource.data.moderators != null && request.auth.uid in resource.data.moderators) ||

          isAdmin()

        ) &&

        fieldUnchanged('createdBy') &&

        fieldUnchanged('district') &&

        request.resource.data.title.size() <= 100;

      allow delete: if signedIn() && 

        (resource.data.createdBy == request.auth.uid || isAdmin());

    }

    match /districts_events/{eventId}/participants/{participantId} {

      allow read: if true;

      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;

      allow update: if signedIn() && resource.data.uid == request.auth.uid;

      allow delete: if signedIn() && resource.data.uid == request.auth.uid;

    }

    // District reactions and votes

    match /districts_reactions/{district}/reactions/{reactionId} {

      allow read: if true;

      allow create: if signedIn() && 

        request.resource.data.uid == request.auth.uid &&

        district.matches('^[a-z]+$') &&

        request.resource.data.targetType in ['message', 'event', 'confession'] &&

        request.resource.data.reactionType in ['like', 'support', 'agree', 'disagree', 'love', 'laugh'] &&

        request.resource.data.timestamp != null;

      allow update, delete: if signedIn() && resource.data.uid == request.auth.uid;

    }

    // District settings and configuration

    match /districts_settings/{district} {

      allow read: if true;

      allow create: if isAdmin() && 

        request.resource.data.district == district &&

        request.resource.data.admins != null &&

        request.resource.data.admins is list;

      allow update: if signedIn() && 

        resource != null &&

        resource.data.admins != null &&

        (request.auth.uid in resource.data.admins || isAdmin()) &&

        request.resource.data.district == resource.data.district &&

        (fieldUnchanged('admins') || isAdmin()) &&

        request.resource.data.admins is list &&

        request.resource.data.district is string;

      allow delete: if false;

    }

    // District active users tracking

    match /districts_active_users/{userId} {

      allow read: if signedIn();

      allow create: if isOwner(userId);

      allow update: if isOwner(userId);

      allow delete: if isOwner(userId);

    }

    match /districts_active_users/{district}/active/{userId} {

      allow read: if signedIn();

      allow create: if isOwner(userId);

      allow update: if isOwner(userId);

      allow delete: if isOwner(userId);

    }

    /* ===== Spotlight System ===== */

    match /spotlight_current/{docId} {

      allow read: if true; // Public read access to current spotlight

      allow create: if isAdmin(); // Only admins can set spotlight

      allow update: if isAdmin();

      allow delete: if isAdmin();

    }

    match /spotlight_queue/{queueId} {

      allow read: if signedIn(); // Users can see who's in queue

      allow create: if signedIn() && request.resource.data.uid == request.auth.uid;

      allow update: if signedIn() && 

        (resource.data.uid == request.auth.uid || isAdmin());

      allow delete: if signedIn() && 

        (resource.data.uid == request.auth.uid || isAdmin());

    }

    match /spotlight_history/{historyId} {

      allow read, write: if false; // Deny access to undefined collections

    }

    /* ===== Reviews System ===== */

    match /reviews/{reviewId} {

      allow read: if true; // Public read for review browsing

      allow create: if signedIn() && 

        request.resource.data.reviewerUid == request.auth.uid &&

        request.resource.data.revieweeUid != request.auth.uid && // Can't review yourself

        request.resource.data.reviewText is string &&

        request.resource.data.reviewText.size() >= 10 &&

        request.resource.data.reviewText.size() <= 1000 &&

        request.resource.data.rating is number &&

        request.resource.data.rating >= 1 &&

        request.resource.data.rating <= 5 &&

        request.resource.data.dateType is string &&

        request.resource.data.timestamp != null;

      allow update: if signedIn() && resource.data.reviewerUid == request.auth.uid;

      allow delete: if signedIn() && 

        (resource.data.reviewerUid == request.auth.uid || isAdmin());

    }

    /* ===== Badges System ===== */

    match /badges/{badgeId} {

      allow read: if true; // Public read for badge browsing

      allow create: if isAdmin(); // Only admins can create badges

      allow update: if isAdmin();

      allow delete: if isAdmin();

    }

    // User badges collection

    match /userBadges/{userId}/badges/{badgeId} {

      allow read: if true; // Public read to see user badges

      allow create: if isAdmin(); // Only admins can award badges

      allow update: if isAdmin();

      allow delete: if isAdmin();

    }

    /* ===== Red Flags System ===== */

    match /redFlags/{flagId} {

      allow read: if true; // Public read for flag browsing

      allow create: if isAdmin(); // Only admins can create flags

      allow update: if isAdmin();

      allow delete: if isAdmin();

    }

    // User red flags collection

    match /userRedFlags/{userId}/flags/{flagId} {

      allow read: if true; // Public read to see user flags (transparency)

      allow create: if signedIn() && userId == request.auth.uid; // Users add their own flags

      allow update: if signedIn() && userId == request.auth.uid;

      allow delete: if signedIn() && 

        (userId == request.auth.uid || isAdmin());

    }

    /* ===== Notifications System ===== */

    match /notifications/{userId}/items/{notificationId} {

      allow read: if isOwner(userId); // Only read your own notifications

      allow create: if signedIn(); // Any user can create notifications

      allow update: if isOwner(userId); // Only update your own notifications

      allow delete: if isOwner(userId); // Only delete your own notifications

    }

    /* ===== Settings and Config ===== */

    match /appConfig/{configId} {

      allow read: if true; // Public read for app configuration

      allow create: if isAdmin();

      allow update: if isAdmin();

      allow delete: if isAdmin();

    }

    /* ===== Analytics and Metrics ===== */

    match /analytics/{metricId} {

      allow read: if isAdmin(); // Only admins can read analytics

      allow create: if signedIn(); // Users can contribute anonymous metrics

      allow update: if isAdmin();

      allow delete: if isAdmin();

    }

    /* ===== Chat Moderation ===== */

    match /moderationReports/{reportId} {

      allow read: if isAdmin(); // Only admins can read reports

      allow create: if signedIn(); // Any user can report content

      allow update: if isAdmin();

      allow delete: if isAdmin();

    }

    /* ===== Global User Statistics ===== */

    match /userStats/{userId} {

      allow read: if true; // Public read for user statistics

      allow create: if isOwner(userId); // Users create their own stats

      allow update: if isOwner(userId) || isAdmin();

      allow delete: if isOwner(userId) || isAdmin();

    }

    /* ===== Dating Interactions ===== */

    match /likes/{likeId} {

      // PRIVACY FIX: Only allow reading likes that involve the authenticated user

      allow read: if signedIn() && (

        resource.data.fromUid == request.auth.uid ||

        resource.data.toUid == request.auth.uid

      );

      allow create: if signedIn() && 

        request.resource.data.fromUid == request.auth.uid &&

        request.resource.data.toUid != request.auth.uid && // Can't like yourself

        request.resource.data.fromUid != null &&

        request.resource.data.toUid != null;

      allow update: if false; // Likes are immutable

      allow delete: if signedIn() && resource.data.fromUid == request.auth.uid;

    }

    match /matches/{matchId} {

      // PRIVACY FIX: Only allow reading matches that involve the authenticated user

      allow read: if signedIn() && (

        request.auth.uid in resource.data.uids

      );

      allow create: if signedIn() && 

        request.resource.data.uids != null &&

        request.resource.data.uids is list &&

        request.resource.data.uids.size() == 2 &&

        request.auth.uid in request.resource.data.uids; // User must be in the match

      allow update: if signedIn() && (

        request.auth.uid in resource.data.uids

      );

      allow delete: if signedIn() && (

        request.auth.uid in resource.data.uids ||

        isAdmin()

      );

    }

    // Match chat messages

    match /matches/{matchId}/messages/{messageId} {

      allow read: if signedIn() && (

        request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.uids

      );

      allow create: if signedIn() && 

        request.resource.data.senderUid == request.auth.uid &&

        (

          request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.uids

        );

      allow update: if signedIn() && resource.data.senderUid == request.auth.uid;

      allow delete: if signedIn() && 

        (resource.data.senderUid == request.auth.uid || isAdmin());

    }

    /* ===== Super Likes System ===== */

    match /superLikes/{superLikeId} {

      allow read: if signedIn() && (

        resource.data.senderUid == request.auth.uid ||

        resource.data.receiverUid == request.auth.uid

      );

      allow create: if signedIn() && 

        request.resource.data.senderUid == request.auth.uid &&

        request.resource.data.receiverUid != request.auth.uid; // Can't super like yourself

      allow update: if false; // Super likes are immutable

      allow delete: if signedIn() && resource.data.senderUid == request.auth.uid;

    }

    /* ===== Profile Views System ===== */

    match /views/{viewId} {

      // PRIVACY FIX: Only allow reading views that involve the authenticated user

      allow read: if signedIn() && (

        resource.data.viewerUid == request.auth.uid ||

        resource.data.viewedUid == request.auth.uid

      );

      allow create: if signedIn() && 

        request.resource.data.viewerUid == request.auth.uid &&

        request.resource.data.viewedUid != request.auth.uid && // Can't view yourself

        request.resource.data.viewerUid != null &&

        request.resource.data.viewedUid != null;

      allow update: if false; // Views are immutable

      allow delete: if signedIn() && resource.data.viewerUid == request.auth.uid;

    }

    /* ===== Arcade Points System ===== */

    match /arcade_points/{userId} {

      allow read: if signedIn() && (

        userId == request.auth.uid ||

        isAdmin()

      );

      allow create: if signedIn() && 

        userId == request.auth.uid;

      allow update: if signedIn() && (

        userId == request.auth.uid ||

        isAdmin() // Allow system to update points

      );

      allow delete: if isOwner(userId) || isAdmin();

    }

    /* ===== Casualties System ===== */

    match /casualties/{casualtyId} {

      allow read: if signedIn(); // Users can read casualties

      allow create: if signedIn() && 

        request.resource.data.uid == request.auth.uid &&

        request.resource.data.uploadedBy == request.auth.uid;

      allow update: if signedIn() && resource.data.uid == request.auth.uid;

      allow delete: if signedIn() && (resource.data.uid == request.auth.uid || isAdmin());

    }

    /* ===== Daily Missions System ===== */

    match /daily_missions/{dateKey} {

      allow read: if signedIn(); // Users can read daily missions

      allow create: if signedIn(); // System can create missions for new dates

      allow update: if isAdmin(); // Only admins can modify missions

      allow delete: if isAdmin();

    }

    match /user_mission_progress/{progressId} {

      allow read: if signedIn() && 

        progressId.matches(request.auth.uid + '_.*'); // Can only read own progress

      allow create: if signedIn() && 

        progressId.matches(request.auth.uid + '_.*') &&

        request.resource.data.userId == request.auth.uid;

      allow update: if signedIn() && 

        progressId.matches(request.auth.uid + '_.*') &&

        resource.data.userId == request.auth.uid;

      allow delete: if signedIn() && 

        progressId.matches(request.auth.uid + '_.*') &&

        resource.data.userId == request.auth.uid;

    }

    /* ===== Block List System ===== */

    match /blocks/{blockId} {

      allow read: if signedIn() && resource.data.blockerUid == request.auth.uid;

      allow create: if signedIn() && 

        request.resource.data.blockerUid == request.auth.uid &&

        request.resource.data.blockedUid != request.auth.uid; // Can't block yourself

      allow update: if false; // Blocks are immutable

      allow delete: if signedIn() && resource.data.blockerUid == request.auth.uid;

    }

    /* ===== Payment and Subscription System ===== */

    match /subscriptions/{userId} {

      allow read: if isOwner(userId) || isAdmin();

      allow create: if isOwner(userId); // Users create their own subscriptions

      allow update: if isAdmin(); // Only admins can update subscription status

      allow delete: if isAdmin();

    }

    match /payments/{paymentId} {

      allow read: if signedIn() && 

        resource.data.userId == request.auth.uid || isAdmin();

      allow create: if signedIn() && 

        request.resource.data.userId == request.auth.uid;

      allow update: if isAdmin(); // Only admins can update payment status

      allow delete: if isAdmin();

    }

    /* ===== Feature Flags ===== */

    match /featureFlags/{flagId} {

      allow read: if true; // Public read for feature availability

      allow create: if isAdmin();

      allow update: if isAdmin();

      allow delete: if isAdmin();

    }

    /* ===== Content Moderation ===== */

    match /contentModerationQueue/{queueId} {

      allow read: if isAdmin(); // Only moderators can see queue

      allow create: if signedIn(); // Users can report content

      allow update: if isAdmin(); // Only moderators can update status

      allow delete: if isAdmin();

    }

    /* ===== User Reports ===== */

    match /userReports/{reportId} {

      allow read: if isAdmin(); // Only admins can read user reports

      allow create: if signedIn() && 

        request.resource.data.reporterUid == request.auth.uid &&

        request.resource.data.reportedUid != request.auth.uid; // Can't report yourself

      allow update: if isAdmin(); // Only admins can update report status

      allow delete: if isAdmin();

    }

    /* ===== Safety Center ===== */

    match /safetyReports/{reportId} {

      allow read: if signedIn() && 

        (resource.data.reporterUid == request.auth.uid || isAdmin());

      allow create: if signedIn() && 

        request.resource.data.reporterUid == request.auth.uid;

      allow update: if isAdmin(); // Only admins can update safety reports

      allow delete: if isAdmin();

    }

    /* ===== Advanced Matching System ===== */

    match /userPreferences/{userId} {

      allow read: if isOwner(userId) || isAdmin();

      allow create: if isOwner(userId);

      allow update: if isOwner(userId);

      allow delete: if isOwner(userId);

    }

    match /matchingAlgorithmData/{userId} {

      allow read: if isOwner(userId) || isAdmin();

      allow create: if isOwner(userId);

      allow update: if signedIn(); // System can update algorithm data

      allow delete: if isOwner(userId) || isAdmin();

    }

    /* ===== Location Services ===== */

    match /userLocations/{userId} {

      allow read: if isOwner(userId) || isAdmin();

      allow create: if isOwner(userId);

      allow update: if isOwner(userId);

      allow delete: if isOwner(userId);

    }

    /* ===== Push Notification Tokens ===== */

    match /pushTokens/{userId} {

      allow read: if isOwner(userId) || isAdmin();

      allow create: if isOwner(userId);

      allow update: if isOwner(userId);

      allow delete: if isOwner(userId);

    }

    /* ===== Activity Feed ===== */

    match /activityFeed/{userId}/activities/{activityId} {

      allow read: if isOwner(userId); // Only read your own activity feed

      allow create: if signedIn(); // System creates activities

      allow update: if isOwner(userId);

      allow delete: if isOwner(userId) || isAdmin();

    }

    /* ===== User Sessions ===== */

    match /userSessions/{sessionId} {

      allow read: if signedIn() && 

        resource.data.userId == request.auth.uid || isAdmin();

      allow create: if signedIn() && 

        request.resource.data.userId == request.auth.uid;

      allow update: if signedIn() && 

        resource.data.userId == request.auth.uid;

      allow delete: if signedIn() && 

        (resource.data.userId == request.auth.uid || isAdmin());

    }

    /* ===== Verification System ===== */

    match /verificationRequests/{requestId} {

      allow read: if signedIn() && 

        (resource.data.userId == request.auth.uid || isAdmin());

      allow create: if signedIn() && 

        request.resource.data.userId == request.auth.uid;

      allow update: if isAdmin(); // Only admins can approve verifications

      allow delete: if isAdmin();

    }

    /* ===== Community Guidelines ===== */

    match /communityGuidelines/{guidelineId} {

      allow read: if true; // Public read for community guidelines

      allow create: if isAdmin();

      allow update: if isAdmin();

      allow delete: if isAdmin();

    }

    /* ===== Help and Support ===== */

    match /supportTickets/{ticketId} {

      allow read: if signedIn() && 

        (resource.data.userId == request.auth.uid || isAdmin());

      allow create: if signedIn() && 

        request.resource.data.userId == request.auth.uid;

      allow update: if signedIn() && 

        (resource.data.userId == request.auth.uid || isAdmin());

      allow delete: if isAdmin();

    }

    /* ===== FAQ System ===== */

    match /faq/{faqId} {

      allow read: if true; // Public read for FAQ

      allow create: if isAdmin();

      allow update: if isAdmin();

      allow delete: if isAdmin();

    }

    /* ===== Terms of Service and Privacy Policy ===== */

    match /legalDocuments/{documentId} {

      allow read: if true; // Public read for legal documents

      allow create: if isAdmin();

      allow update: if isAdmin();

      allow delete: if isAdmin();

    }

    /* ===== A/B Testing ===== */

    match /abTests/{testId} {

      allow read: if signedIn(); // Users need to read test configurations

      allow create: if isAdmin();

      allow update: if isAdmin();

      allow delete: if isAdmin();

    }

    match /abTestParticipants/{participantId} {

      allow read: if signedIn() && 

        resource.data.userId == request.auth.uid;

      allow create: if signedIn() && 

        request.resource.data.userId == request.auth.uid;

      allow update: if signedIn() && 

        resource.data.userId == request.auth.uid;

      allow delete: if signedIn() && 

        resource.data.userId == request.auth.uid;

    }

    /* ===== MISSING CRITICAL COLLECTIONS - FIXED ===== */

    // Arcade Points system

    match /arcade_points/{userId} {

      allow read: if signedIn(); // Public leaderboards need read access

      allow create: if isOwner(userId);

      allow update: if isOwner(userId);

      allow delete: if isAdmin();

    }

    // Passport System Collections

    match /passport_stamps/{userId} {

      allow read: if signedIn(); // Public access for leaderboards

      allow create, update: if isOwner(userId);

      allow delete: if isAdmin();

    }

    match /passport_travels/{travelId} {

      allow read: if signedIn();

      allow create: if signedIn() && isOwner(request.resource.data.userId);

      allow update: if signedIn() && isOwner(resource.data.userId);

      allow delete: if isAdmin();

    }

    match /passport_encounters/{encounterId} {

      allow read: if signedIn();

      allow create: if signedIn() && isOwner(request.resource.data.userId);

      allow update: if signedIn() && isOwner(resource.data.userId);

      allow delete: if isAdmin();

    }

    match /user_passports/{userId} {

      allow read: if signedIn(); // Public access for profiles

      allow create: if isOwner(userId);

      allow update: if isOwner(userId);

      allow delete: if isAdmin();

    }

    // Daily Missions System

    match /daily_missions/{missionId} {

      allow read: if signedIn(); // Anyone can read available missions

      allow create, update, delete: if isAdmin(); // Admin manages missions

    }

    match /user_mission_progress/{userId} {

      allow read: if isOwner(userId);

      allow create: if isOwner(userId);

      allow update: if isOwner(userId);

      allow delete: if isAdmin();

    }

    match /daily_completion_rewards/{userId} {

      allow read: if isOwner(userId);

      allow create, update: if isOwner(userId);

      allow delete: if isAdmin();

    }

    // Casualties System

    match /dating_casualties/{casualtyId} {

      allow read: if signedIn(); // Public access for community viewing

      allow create: if signedIn() && isOwner(request.resource.data.authorUid);

      allow update: if signedIn() && isOwner(resource.data.authorUid);

      allow delete: if isAdmin() || isOwner(resource.data.authorUid);

    }

    match /casualties/{casualtyId} {

      allow read: if signedIn();

      allow create: if signedIn() && isOwner(request.resource.data.reporterUid);

      allow update: if signedIn() && isOwner(resource.data.reporterUid);

      allow delete: if isAdmin() || isOwner(resource.data.reporterUid);

    }

    match /user_casualty_votes/{voteId} {

      allow read: if signedIn();

      allow create: if signedIn() && isOwner(request.resource.data.voterUid);

      allow update: if signedIn() && isOwner(resource.data.voterUid);

      allow delete: if isAdmin() || isOwner(resource.data.voterUid);

    }

    // Global Notifications

    match /globalNotifications/{notificationId} {

      allow read: if signedIn(); // All users can read notifications

      allow create, update, delete: if isAdmin(); // Only admin can manage notifications

    }

    // Districts Users Management

    match /districts_users/{userId} {

      allow read: if signedIn(); // Public access for district participation

      allow create: if isOwner(userId);

      allow update: if isOwner(userId);

      allow delete: if isAdmin() || isOwner(userId);

    }

    /* ===== Catch-all Security Rule ===== */

    // Deny access to any collection not explicitly defined above

    match /{document=**} {

      allow read, write: if false;

    }

  }

}
